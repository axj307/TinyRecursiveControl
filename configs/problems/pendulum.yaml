# Pendulum Control Problem Configuration
#
# Classic nonlinear control problem: stabilizing an inverted pendulum.
# The goal is to swing up and stabilize the pendulum at the upright position.
#
# State: [theta, theta_dot] (angle from upright, angular velocity)
# Control: [torque]
# Dynamics: I*theta'' = -m*g*l*sin(theta) - b*theta' + u

# =============================================================================
# Problem Identification
# =============================================================================
problem:
  name: "pendulum"
  type: "nonlinear"
  description: "Inverted pendulum stabilization with nonlinear dynamics"

# =============================================================================
# Dynamics Parameters
# =============================================================================
dynamics:
  # Time discretization
  dt: 0.05          # Time step (seconds) - smaller for nonlinear system
  horizon: 100      # Control horizon (number of steps)
  total_time: 5.0   # Total time horizon (dt * horizon = 5.0s)

  # Physical parameters
  mass: 1.0         # Pendulum mass (kg)
  length: 1.0       # Pendulum length (m)
  gravity: 9.81     # Gravitational acceleration (m/s^2)
  friction: 0.1     # Friction coefficient (N⋅m⋅s/rad)

  # Control limits
  max_torque: 2.0   # Maximum torque (N⋅m)

# =============================================================================
# State and Control Bounds
# =============================================================================
bounds:
  # State space bounds: [theta, theta_dot]
  state:
    lower: [-3.14159, -8.0]  # [-π rad, -8 rad/s]
    upper: [3.14159, 8.0]    # [π rad, 8 rad/s]

  # Control input bounds: [torque]
  control:
    lower: [-2.0]   # [N⋅m]
    upper: [2.0]    # [N⋅m]

  # Initial state sampling bounds
  # Sample from full angle range but small angular velocities
  initial_state:
    lower: [-3.14159, -1.0]  # [-π rad, -1 rad/s]
    upper: [3.14159, 1.0]    # [π rad, 1 rad/s]

# =============================================================================
# LQR Cost Parameters
# =============================================================================
# These parameters are for linearization around upright position (theta=0)
lqr:
  # State cost matrix Q (penalizes deviation from upright)
  # Q = diag([q_angle, q_angular_velocity])
  # High penalty on angle to strongly encourage upright position
  Q_matrix: [[100.0, 0.0], [0.0, 10.0]]

  # Control cost R (penalizes torque)
  # Low value allows aggressive control
  R_value: 0.01

  # Terminal cost multiplier
  Q_terminal_multiplier: 100.0

# =============================================================================
# Data Generation Settings
# =============================================================================
data:
  # Dataset sizes
  num_train_samples: 10000
  num_test_samples: 1000

  # Controller type for optimal trajectory generation
  # Options:
  #   - "lqr": Linearized LQR around upright (works for small angles)
  #   - "ilqr": Iterative LQR (better for nonlinear, larger deviations)
  #   - "mpc": Model Predictive Control
  # For pendulum, LQR with linearization is a good starting point
  controller: "lqr"

  # Random seeds
  train_seed: 42
  test_seed: 123

  # Sampling strategy
  sampling:
    method: "uniform"  # Uniform sampling across angle and velocity ranges

    # Note: For swing-up tasks, you might want to sample more heavily
    # from certain regions (e.g., near downward position)
    # biased_sampling:
    #   enabled: false
    #   bias_towards_downward: false

# =============================================================================
# Training-Specific Settings
# =============================================================================
training:
  # Normalization
  normalize_states: true  # Recommended for pendulum due to different scales
  normalize_controls: false

  # State normalization params (if enabled)
  state_normalization:
    # Normalize theta to [-1, 1] and theta_dot to [-1, 1]
    theta_range: 3.14159    # π
    theta_dot_range: 8.0

  # Augmentation
  augmentation:
    enabled: true
    flip_sign: true      # Flip theta and torque sign (system is symmetric)
    add_noise: false     # Optional: add small noise for robustness
    noise_std: 0.01

# =============================================================================
# Evaluation Settings
# =============================================================================
evaluation:
  # Success threshold (total state error)
  success_threshold: 0.2  # Slightly higher than double integrator

  # Metrics to compute
  metrics:
    - "angle_error"
    - "angular_velocity_error"
    - "control_cost"
    - "success_rate"
    - "energy"  # Track mechanical energy
    - "stabilization_time"  # Time to reach and stay near upright

  # Evaluation-specific settings
  stabilization_tolerance: 0.1  # rad, for measuring stabilization time
  stabilization_duration: 1.0   # seconds pendulum must stay stable

# =============================================================================
# Solver Settings (for nonlinear control)
# =============================================================================
solver:
  # Settings for iterative LQR or other nonlinear solvers
  max_iterations: 100
  convergence_tolerance: 1e-4
  line_search: true
  regularization: 1e-6

# =============================================================================
# Notes
# =============================================================================
notes: |
  Default configuration for pendulum stabilization problem.

  This is a nonlinear control problem where the objective is to stabilize
  an inverted pendulum at the upright position (theta=0).

  Key challenges:
  - Nonlinear dynamics (sin(theta) term)
  - Angle wrapping (theta ∈ [-π, π])
  - Limited control authority (torque bounds)

  The LQR controller uses linearization around the upright position,
  which works well for small to moderate deviations. For large swings
  (e.g., swing-up from downward position), iterative LQR or MPC would
  be more appropriate.

  Physical interpretation:
  - mass=1kg, length=1m: Standard textbook pendulum
  - max_torque=2 N⋅m: Moderate control authority
  - friction=0.1: Light damping
